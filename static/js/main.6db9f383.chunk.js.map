{"version":3,"sources":["components/job.svg","components/contacts.js","App.js","serviceWorker.js","index.js","config.js"],"names":["module","exports","Contacts","props","contacts","jun","className","filter","contact","title","includes","map","index","key","Card","CardImg","top","width","src","require","height","alt","CardBody","CardTitle","dangerouslySetInnerHTML","__html","CardSubtitle","location","display_name","CardText","description","href","redirect_url","App","state","job","city","headers","makeApiCall","url","keys","APP_ID","API_KEY","fetch","then","res","json","data","console","log","results","setState","catch","error","changeJun","e","target","value","changeJob","changeCity","handelSubmit","preventDefault","Form","onSubmit","this","id","FormGroup","Input","type","name","placeholder","onChange","Button","onClick","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","BASE_URL","BASE_PARAMS"],"mappings":"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","file":"static/js/main.6db9f383.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/job.999eb6de.svg\";","import React from 'react'\n\n//import Formjob from './Formjob'\nimport {\n  Card, CardText, CardBody,\n  CardTitle, CardSubtitle,CardImg\n} from 'reactstrap';\n  \n\n    const Contacts = (props) => {\n     let contacts = props.contacts;\n      var jun  = props.jun;\n     \n      return (\n        \n  <div >\n  \n  <h1 className=\"text-center p-3 mb-2 bg-success text-white\">RESULTS OF SEARCH</h1>\n  \n   {/* -----------------------------------------the result of search---------------------------------  */}\n   \n          {contacts.filter(\n           contact=>contact.title.includes('Junior','junior')  \n           \n          ).map((contact,index) => (\n           \n            <div key={index} >\n            \n      <Card>\n      <CardImg top width=\"100%\" src={require('./job.svg')}   height=\"100\" alt=\"Card image cap\" />\n        <CardBody>\n       \n     \n \n          <CardTitle><h4> <div className=\"content\" dangerouslySetInnerHTML={{__html:contact.title}}></div></h4></CardTitle> \n       \n          <CardSubtitle> <h5 className=\" text-danger\">{contact.location.display_name}</h5></CardSubtitle>\n          \n          <CardText><div className=\"content\" dangerouslySetInnerHTML={{__html: contact.description}}></div></CardText>\n          <a href={contact.redirect_url}>View Job</a>\n        </CardBody>\n      </Card>\n    </div>\n         )\n          ) }\n        </div>\n      )\n    };\n    export default Contacts\n\n    ","//npm install --save reactstrap react react-dom\n    import React, { Component } from 'react'\n    import Contacts from './components/contacts'\n    import keys from './config'\n    //import Formjob from './components/Formjob'\n    import { Button, Form, FormGroup, Input } from 'reactstrap';\n\n\n    export default class App extends Component {\n    \n      state = {\n        contacts: [],\n        job: 'java' ,\n        city: 'Berlin',\n        jun:'',\n       \n    \n              }\n             \n       headers= {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'GET',\n              }\n               \n           \n    makeApiCall=(job,city) =>{\n     const url = `http://api.adzuna.com:80/v1/api/jobs/de/search/1?app_id=${keys.APP_ID}&app_key=${keys.API_KEY}&results_per_page=20&what=${this.state.job}&where=${this.state.city}&content-type=application/json`\n      fetch(url)\n       .then(res =>{return res.json()})\n       .then((data) => {\n        console.log('results:',data.results)\n        \n     this.setState({  contacts: data.results}) \n                })\n           \n                .catch(\n                  (error)=>console.log(error)\n                  \n                )\n                };\n              //________________________________________\n              changeJun=(e)=>{\n              \n                this.setState({\n               job: e.target.value,  \n              \n               }) \n\n             }\n             \n             \n             \n              changeJob=(e)=>{\n                this.setState({\n                job:e.target.value,\n               }) \n             }\n           \n             changeCity=(e)=>{\n               this.setState({\n              \n               city:e.target.value,\n              \n              }) \n             \n            }\n           \n             handelSubmit=(e)=>{\n               e.preventDefault();\n               console.log('form submitted ',this.state.job)\n               console.log('form submitted ',this.state.city)\n             }\n           \n            \n              //-------------------------------------------\n\n      render() {\n        \n        return (\n          <div>\n         \n            <Form  onSubmit={this.handelSubmit} className=\"container\" id=\"search-form\">\n      <FormGroup>\n        <Input type=\"text\" className=\"form-control\" name=\"job\" id=\"job\" placeholder=\"JobTitle\"\n        onChange={this.changeJob}/> \n        <Input type=\"text\"  className=\"form-control\" name=\"city\" id=\"city\" placeholder=\"locationTitle\" \n        onChange={this.changeCity}/> \n        \n        <Button  onClick={this.makeApiCall} className=\"btn btn-block btn-info\">Search</Button>\n        <Input name='jun' id='jun' type=\"text\" placeholder=\"Filter according to your requirements \" \n        onChange={this.changeJun} />\n       \n      </FormGroup>\n      </Form>\n     \n    \n          {/*  //------------------------------ */}\n         \n              <Contacts contacts={this.state.contacts} jun={this.state.jun}  />\n\n          </div>\n           \n        )\n      }\n    }\n   \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nconst APP_ID1='c7212bc0';\nconst API_KEY1='3ae54560f5840fd67f71ae9bd4f53330';\nmodule.exports = {\n  \n  APP_ID: APP_ID1,\n  API_KEY: API_KEY1,\n  BASE_URL: 'https://api.adzuna.com/v1/api/jobs',\n  BASE_PARAMS: 'search/1?&results_per_page=20&content-type=application/json',\n};\n\n\n\n/* const targetURL = `${config.BASE_URL}/${country.toLowerCase()}/${config.BASE_PARAMS}&app_id=\n${config.APP_ID}&app_key=${config.API_KEY}&what=${search}&where=${location}`; */"],"sourceRoot":""}